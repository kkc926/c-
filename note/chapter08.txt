■ 객체를 함수로 전달하기
 함수 호출시 객체를 매개변수로 전달하면 객체의 복사가 일어남

■ 객체의 주소를 함수로 전달하기
 함수 호출시 객체의 주소를 전달하면 객체의 복사가 일어나지 않음
■ 참조자 매개변수 사용하기
 효과는 포인터를 넘기는 것과 동일하나 포인터 보다 가독성이 좋아짐

■ 함수가 객체를 반환
 객체를 함수의 매개변수로 전달할 때와 같이 객체의 복사가 일어남

Pizza pizza = createPizza();

■ 복사 생성자가 사용되는 시점
 함수의 매개변수로 객체를 전달할 때
 객체를 대입할 때

■ 복사 생성자
MyClass(const MyClass & other) {
// 객체 초기화
}
 MyClass(MyClass other)로 하면 무한 루프 발생 하므로 주의!
 복사 생성자를 정의하지 않으면 자동으로 추가 -->동적 메모리는 복사되지 않는다 같은 메모리를 복사,원본 두개가 참조함
 멤버 변수에 대한 얕은 복사 진행
 깊은 복사가 필요한 경우 복사 생성자 정의 필요


■ 복사 생성자
 얕은 복사와 깊은 복사

얕은복사 : 참조된 데이터를 원객체와 복사된 객체가 참조할때 
깊은복사 : 참조된 데이터가 복사되어 원객체 - 참조값1 복사된객체 - 참조값1-1 


--------복사 생성자 - 디폴트 복사 생성자
#include <iostream>
#include <string>
using namespace std;
class Person
{
public:
    int age;
    Person(int a) : age(a) {}
};

int main(int argc, char const *argv[])
{
    Person kim{21};
    Person clone{kim}; // 복사 생성자 호출
    cout << "kim의 나이: " << kim.age << " clone의 나이: " << clone.age << endl;
    kim.age = 23;
    cout << "kim의 나이: " << kim.age << " clone의 나이: " << clone.age << endl;
    return 0;
}


------------------------복사 생성자 - 얕은 복사의 문제점

#include <iostream>
#include <string>
using namespace std;
class MyArray
{
public:
    int size;
    int *data;
    MyArray(int size)
    {
        this->size = size;
        data = new int[size];
    }
    ~MyArray()
    {
        if (data != NULL)
        {
            delete[] data;
        }
    }
};

int main(int argc, char const *argv[])
{
    MyArray buffer(10);
    buffer.data[0] = 1;
    {
        MyArray clone = buffer; // 복사 생성자 호출
    }                           // clone 삭제
    buffer.data[0] = 2;
    return 0;
}

----------아두이노는 얕은 복사까지----------