함수와 문자열

#include<iostream>
using namespace std;

int max (int x, int y){
    if (x>y)
        return x;
    else
        return y;
        
}
int main(int argc, char const *argv[]){
   int n;
   n=max(2,3);
   cout << "함수호출결과 : "<<n<<endl;
   return 0;
}

-------------------------------------------

void : 리턴 데이터가 없는 경우에 사용한다.

함수 인자 전달방법 

1.call by value 값 복사 (파이썬에서는 숫자, 불린만 call by value) c++은 제한없이 다 가능

2.call by reference 값 참조  : 기존 변수에 새로운 이름을 추가하는 것 저장 공간 하나에 대해서 운영할 수 있는 이름을 추가한다.

3. call by address(pointer) 주소 


----------call by value
#include <iostream>
using namespace std;
void swap(int x, int y) {
int t;
t = x;
x = y;
y = t;
}
int main(int argc, char const *argv[]) {
int a = 100, b = 200;
printf("a=%d, b=%d\n", a, b);
swap(a, b);
printf("a=%d, b=%d\n", a, b);
return 0;
}

---------call by reference 참조 매개변수를 통해 원본의 값을 수정할 수 있다.

#include <iostream>
using namespace std;
void swap(int &x, int &y) // x,y의 공간이 만들어 지지 않는다 a,b의 닉네임 x,y를 만듬 --->따라서 대입한 값은 원본을 수정함.
{
    int t;
    t = x;
    x = y;
    y = t;
}
int main(int argc, char const *argv[])
{
    int a = 100, b = 200;
    printf("a=%d, b=%d\n", a, b);
    swap(a, b);
    printf("a=%d, b=%d\n", a, b);
    return 0;
}


----------------------------------------------------------------
중복함수 (overload)

함수의 이름은 동일하지만 함수의 인자가 다르면 다른 함수로 인식 (python은 지원 안됨)
리턴타입은 상관 없음.

void print(int)
void print(double)
void print(char)

----
#include<iostream>
using namespace std;


int square (int i){
    cout << "square(int) 호출 "<<endl;
    return i*i;
}
double square (double i){
    cout << "square(double) 호출 "<<endl;
    return i*i;
}

int main(int argc, char const *argv[]){
    cout << square(10)<<endl;
    cout << square(2.1)<<endl; 
   return 0;
}
-----------------------------------

인수의 디폴트 값 원하는 인수로 배열을 초기화하기

#include<iostream>
using namespace std;

void initArray(int array[] ,int value = 0){
    int size = sizeof(array)/sizeof(int); //배열의 길이 구하기

    for (int i=0; i <size  ; i++){
        array[i]=value;
    }


}

int main(int argc, char const *argv[]){
    int intList[10];

    initArray(intList, 100); //100으로 초기화 하고싶다.
    initArray(intList); // 0으로 초기화 하고싶다.

   return 0;
}

----배열의 복사
call by value가 가능하다 --> 값1=값2 이 가능하다
배열1=배열2 가능?? ---->불가능 ---> call by value가 불가능함
배열은 call by adress로 복사가된다.(포인터) 

#include<iostream>
using namespace std;

void initArray(int array[], int size, int value = 0){
  

    for (int i=0; i <size  ; i++){
        array[i]=value;
    }


}

void printArray(int array[] ,int size){
    //int size = sizeof(array)/sizeof(int); //배열의 길이 구하기

    for (int i=0; i <size  ; i++){
        cout << array[i] << ", ";
    }
    cout << endl;
}

int main(int argc, char const *argv[]){
    const int ARRAY_SIZE = 40;
    int intList[ARRAY_SIZE];
    

    initArray(intList,ARRAY_SIZE, 100); //100으로 초기화 하고싶다.
    printArray(intList, ARRAY_SIZE);
    initArray(intList,ARRAY_SIZE); // 0으로 초기화 하고싶다.
    printArray(intList, ARRAY_SIZE);
   return 0;
}

------------------------------------------------------------------------------
문자열

c++은 문자열 타입이 없으므로 #include <string>을 먼저 지정 후 사용

파이썬 문자열은 원본 조작이 불가능함
c++은 가능하다
s.insert(pos, s2)
sremove(pds, len)을 이용

#include<iostream>
using namespace std;
int main(int argc, char const *argv[]){
   

   string s1="slow", s2="steady";
   string s3="the race.";
   string s4;

   s4=s1+" and " +s2 + " wins " +s3;

   cout << s4<< endl;
   return 0;
}

------
문자열 입력받기.

#include <iostream>
#include <string>
using namespace std;
int main(int argc, char const *argv[])
{
    string s1, addr;
    cout << "이름을 입력하세요: ";
    cin >> s1;
    cin.ignore(); // 엔터키 제거 "홍길동\r\n" \n을 제거해준다
    cout << "주소를 입력하세요: ";
    getline(cin, addr);
    cout << addr << "의" << s1 << "씨 안녕하세요?" << endl;
    return 0;
}

-------------------
c++은 문자열 수정 및 삭제가 가능하다.
#include <iostream>
#include <string>
using namespace std;
int main(int argc, char const *argv[])
{
    string s = "When in Rome, do as the Romans.";
    int size = s.size();
    int index = s.find("Rome");
    cout << size << endl;
    cout << index << endl;

    cout << sizeof(s) << endl; //?

    s.insert(0, "Hello !! "); //맨 앞에 문자열 추가
    cout << s << endl;

    s += " End of World"; ///맨 뒤에 문자열 추가
    //s=s+"End of World";
    cout << s << endl;
    s.append("\n-----------------------\n"); // 맨뒤에 문자열 추가
    cout << s;
    return 0;
}
---------------------
배열이름은 배열의 첫번째 엘리먼트의 주소값을 갖는다. 주소값을 갖는 상수이다.
string list[] --> list는 지역변수로 스택에 형성됨, 또한 상수이기 때문에 값을 변경할 수 없다. (대입연산 배열1 = 배열2 이 안되는 이유) 
list는 첫번째 엘리먼트의 주소가 저장된다. 


&참조값을 붙이고 안붙이고 읽기 쓰기 차이
#include<iostream>
#include<string>
using namespace std;
int main(int argc, char const *argv[]){
   string s= "When in Rome, do as Romans.";
//읽기
   for ( auto& ch : s ){ //char &ch = s[i] //&가 있으면 ch가 별도로 생기는것이 아니고 엘리먼트에 ch라는 닉네임이 생성됨, 복사,출력이 아닌 그냥 출력을 하여 속도가 빨라짐
       cout << ch << ' ';

   }
   cout << endl;

   for ( auto ch : s ){ //char ch = s[i]  //& 가 없는경우 ch의 메모리 공간이 만들어지고, 루프가 돌면서 ch변수로 복사된 후 출력됨
       cout << ch << ' ';
 ///////////////////참조, 복사 둘다 읽기에서는 차이가 없음.
   }
   cout << endl;
//쓰기  
   for (auto& ch : s){ //char &ch = s[i] //ch라는 공간을 만들지 않음 엘리먼트를 나타내는 변수(닉네임)로써 ch를 사용하겠다.--->따라서 대입한 값은 원본을 수정함.
       ch = 'T';
   }
   cout << s << endl;

   cout << endl;

   for (auto ch : s){ //char ch = s[i] //ch란 공간을 만듬--> 루프를돌며 s값을 가져옴 --> 공간에 W를 대입하여 덮어씀
       ch = 'W'; 

   }
   cout << s << endl;
   

   return 0;
}

참조변수 --> 함수에서 매개변수를 대입받을때, for문 사용할때 두개에서 많이 쓰임
c++ 작업시 주의할점 -> 데이터가 어디에 있느냐? 복사본인지 원본인지 구분하는것이 중요함.
