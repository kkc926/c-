관계연산자

boolalpha; 부울린을 true, false로 출력

#include <iostream>
using namespace std;
int main(int argc, char const *argv[])
{
    bool b;
    b = (1 == 2);
    cout << std::boolalpha;
    cout << b << endl;
    return 0;
}

----------------------------------------------
#include <iostream>
using namespace std;
int main(int argc, char const *argv[])
{
    bool b;
    int x = 3;
    int y = 3;
    cout << std::boolalpha; // 부울린을 true, false로 출력
    b = (x == 3) && (y == 3);
    cout << b << endl;
    y = 2;
    b = (x == 3) && (y == 3);
    cout << b << endl;
    b = (x == 3) || (y == 3);
    cout << b << endl;
    x = 2;
    b = (x == 3) || (y == 3);
    cout << b << endl;
    b = !(x == 3);
    cout << b << endl;
    return 0;
}
-------------------------------------------------
cpp실행시 틀 만들기
사용자 코드조각 -> c++ -> cpp.json 
{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	"Print to console": {
		"prefix": "c++_main",
		"body": [
			"#include<iostream>;",
			"using namespace std;",
			"int main(int argc, char const *argv[]){",
			"   $0",
			"   return 0;",
			"}"

		],
		"description": "c++ main 함수"
	}
}
으로 수정 $0는 커서 위치임

---------------------------------------------

if 문 //else if //else

#include <iostream>
using namespace std;
int main(int argc, char const *argv[])
{
    int x, y;
    cout << "x값을 입력하세요";
    cin >> x;
    cout << "y값을 입력하세요";
    cin >> y;
    if (x > y)
        cout << "x가 y보다 큽니다." << endl;
    else if (x < y)
        cout << "x가 y보다 작습니다." << endl;
    else
        cout << "x와 y가 같습니다." << endl;
    return 0;
}
--------------------------------------------------
switch 문 


case는 정수만 가능(int)하다 이유는 동등연산자로 값을 비교하기 때문

실수, 부동소수점, 문자 다안됨. (Java는 가능 c++은 불가능)

#include<iostream>
using namespace std;
int main(int argc, char const *argv[]){
   int number;

   cout << "숫자를 입력하세요 : ";
   cin >> number;

   switch(number){
       case 0:
       cout << "zero\n";
       break;
       case 1:
       cout<<" one\n";
       break;
       case 2:
       cout <<" two\n";
       default:
       cout << " many\n";
       break;
   }
   return 0;
}

------------------------------------------------------------


반복문 (while for dowhile)

while문에서 루프를 돌릴때 조건변수를 n을 변화해주는 코드를 입력해주어야함 안그러면 무한루프

while문은 조건이 앞에있어 조건에 안맞으면 실행안함
#include<iostream>
using namespace std;
int main(int argc, char const *argv[]){
   int n=10;

   while (n>0){
       cout << n << " ";
       n--;
   }

   cout << "fire!"<<endl;
   return 0;
}



---구구단
#include<iostream>
using namespace std;
int main(int argc, char const *argv[]){
   int n;
   int i=1;

   cout <<"구구단 중에서 출력하고 싶은 단을 입력하세요: ";
   cin>>n;

   while (i<=9){
       cout << n << " * " << i
            << " = " << n*i << endl;
        i++;
   }
   return 0;
}
---do while문
조건이 뒤에 있기때문에 무조건 한번은 실행함

#include <iostream>
#include <string>
using namespace std;
int main(int argc, char const *argv[])
{
    string str;
    do
    {
        cout << "문자열을 입력하세요:";
        // getline(cin, str);
        cin>>str;					cin의 경우 공백을 문장의 끝으로 인식하여 안녕 하세요를 입력하면 안녕 사용자의입력:하세요. 로 출력됨
        cout << "사용자의 입력 : " << str << endl;
    } while (str != "종료");
    return 0;
}

-----for 문

#include <iostream>
using namespace std;
int main()
{
    int sum = 0;                                     꼭 초기화해줘야함 sum=0
    for (int i = 0; i <= 10; i++)
    {
        sum += i;
    }
    cout << "1부터 10까지 정수의 합 = " << sum << endl;
    return 0;
}



#include <iostream>
using namespace std;
int main()
{
    long fact = 1;
    int n;
    cout << "정수를 입력하세요: ";
    cin >> n;
    for (int i = 1; i <= n; i++)
    {
        fact = fact * i;
    }
    cout << n << "! = " << fact << endl;
    return 0;
}
-----for break, continue문 보통 if문과 함께쓴다.

#include <iostream>
using namespace std;
int main() {
for(int i=1; i<10; i++) {
cout << i << " ";
if(i==4) break;
}
return 0;
}



#include <iostream>
using namespace std;
int main()
{
    for (int i = 1; i < 5; i++)
    {
        cout << "continue 문장 전에 있는 문장" << endl;
        continue;
        cout << "continue 문장 이후에 있는 문장" << endl;
    }
    return 0;
}


-------------------------------------------------------------------------

배열
 -'같은 종류의 데이터'<--(파이썬과 다른점) 들이 순차적으로 메모리에 저장되는 자료 구조
 -각각의 데이터(요소)들은 인덱스(번호)를 사용하여 독립적으로 접근 가능
 -대용량의 데이터를 동일한 이름으로 쉽게 저장하고 처리 가능

   -다른언어와 달리 크기가 고정되어있어 엘리먼트 갯수를 관리해야함
(파이썬에선 length 함수로 확인 가능함)

#include<iostream>
using namespace std;
int main(int argc, char const *argv[]){
   
   const int STUDENTS = 10; //배열의 숫자

   int scores[STUDENTS]; //숫자 10만 쓰면 무슨데이터인지 한번에 알 수 없어서 변수를 사용함

    int sum = 0;
    int i, average;

    for (i=0; i<STUDENTS;i++){
        cout <<"학생들의 성적을 입력하시요: ";  //<---사용자 입력으로 값을 초기화한다.
        cin >>scores[i];
    }
    for (i=0; i<STUDENTS; i++){
        sum += scores[i];
    }
    average = sum / STUDENTS;
    cout<<"성적 평균= " <<average << endl;


   return 0;
}

-------배열의 초기화

테스트할때 일일이 입력하기는 번거롭다 {}를 이용해 고정된 배열을 만들자

#include <iostream>
using namespace std;
int main()
{
    const int STUDENTS = 5;
    int scores[STUDENTS] = {         // 만약 5개 이상의 값을 넣으면 syntaxerror : too many initializers for 'int []' 가 뜸
        100, 200, 300, 400, 500};
    int sum = 0;
    int i, average;
    for (i = 0; i < STUDENTS; i++)
    {
        sum += scores[i];
    }
    average = sum / STUDENTS;
    cout << "성적 평균= " << average << endl;
    return 0;
}

값이 모두 0인 배열만들기
int scores[STUDENTS]={0,}   /// {}

------ 소수점까지평균구하기 
받을 변수를 double로 선언하고, sum이나 STUDENTS를 double로 만든다.
#include <iostream>
using namespace std;
int main()
{
    const int STUDENTS = 7;
    int scores[STUDENTS] = {
        100, 200, 300, 400, 550,500,433};
    int sum = 0;
    int i; 
    double average;
    for (i = 0; i < STUDENTS; i++)
    {
        sum += scores[i];
    }
    average = sum / (double)STUDENTS;
    cout << "성적 평균= " << average << endl;
    return 0;
}


---------------------------제어구조

향상된 for문
for ( 변수 : 범위 ) {
}

for (i = 0; i < STUDENTS; i++) 이렇게 쓸필요없이
for (i=0 : STUDENTS) 끝


#include<iostream>
using namespace std;
int main(int argc, char const *argv[]){
   int list[] = {1,2,3,4,5,6,7,8,9,10};
   int sum = 0;
   for (int i : list){
       sum += i;
   }
   cout << sum << endl << endl;

   for (int&i : list){
       cout << i << " ";
   }
    cout << endl;
    for (auto& i : list){
        cout << i << " ";
    }
   return 0;
}
-----------------------------------------

c++ 변수의 타입 3개
일반변수 int 변수명 ex) int sum = 0 , int total=0 독립된 sum, total값이 생성됨 
참조변수 int & 변수명  ex) int &total = sum -----> int total, int sum 둘다 값이 0이며 sum의 값에 total이라는 이름을 하나 더 주는것 (닉네임을 만들어줌) 엘리먼트에 접근접근접
 쓰임: 복사를 하지 않고 그때그때 참조만 하기 때문에 데이터 절약이 가능함.
<시간상의 이점이 생김 
-참조가 아닐떈 메모리에 공간이 생기고 데이터를 복사하는 시간이 걸린다 데이터가 커지면 복사하는 시간이 길어짐
-참조면 데이터가 복사 후 출력이 아니고 i가 각 엘리먼트에 별칭으로 배정이된다 그래서 '복사하고 출력하는 시간을 절약할 수 있다.'>

포인터변수 

 